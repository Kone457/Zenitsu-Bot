const axios = require('axios');
const thumbnailUrl = 'https://qu.ax/0XKxP.jpg'; // Miniatura simb√≥lica del portal Facebook

const contextInfo = {
  externalAdReply: {
    title: 'üìò Facebook Ritual',
    body: 'Videos que emergen del archivo emocional de Meta...',
    mediaType: 1,
    previewType: 0,
    mediaUrl: null,
    sourceUrl: 'https://facebook.com',
    thumbnailUrl
  }
};

async function handler(conn, { message, args }) {
  const jid = message.key.remoteJid;
  const quoted = message;
  const url = args[0];

  console.log('\nüåÄ [fb] Ritual iniciado...');
  console.log('üîó Enlace recibido:', url);

  if (!url || !url.includes('facebook.com')) {
    console.log('‚ö†Ô∏è [fb] Enlace inv√°lido o ausente');
    return conn.sendMessage(jid, {
      text: '*üìò ¬øD√≥nde est√° el portal de Meta?*\n\n> Ingresa un enlace v√°lido de Facebook para invocar el video.',
      contextInfo
    }, { quoted });
  }

  await conn.sendMessage(jid, {
    text: 'üîÆ *Invocando el archivo emocional desde Facebook...*',
    contextInfo
  }, { quoted });

  try {
    const api = `https://api.vreden.my.id/api/fbdl?url=${encodeURIComponent(url)}`;
    console.log('üåê [fb] Consultando API:', api);

    const res = await axios.get(api);
    console.log('üì• [fb] Respuesta recibida:', JSON.stringify(res.data, null, 2));

    const data = res.data?.data;

    if (!data || !data.hd_url) {
      console.log('‚ùå [fb] Video no disponible o sin hd_url');
      return conn.sendMessage(jid, {
        text: 'üì≠ *No se pudo abrir el portal del recuerdo.*\n\n> Verifica el enlace o intenta m√°s tarde.',
        contextInfo
      }, { quoted });
    }

    const caption = `
‚ï≠‚îÄ„Äå üìò ùôÅùòºùòæùôÄùòΩùôäùôäùôÜ - ùôçùôÑùôèùôêùòºùôá „Äç‚îÄ‚ïÆ
‚îÇ üîó *Enlace:* ${url}
‚îÇ üß† *Origen:* api.vreden.my.id
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
*‚ú® Video invocado con √©xito...*
`.trim();

    console.log('üì¶ [fb] Descargando video como buffer...');
    const videoBuffer = await axios.get(data.hd_url, {
      responseType: 'arraybuffer'
    }).then(res => res.data).catch(err => {
      console.error('üß® [fb] Error al descargar el video:', err.message);
      return null;
    });

    if (!videoBuffer) {
      return conn.sendMessage(jid, {
        text: 'üì≠ *No se pudo abrir el portal del recuerdo.*\n\n> El video no pudo ser descargado.',
        contextInfo
      }, { quoted });
    }

    console.log('üé¨ [fb] Enviando video como archivo binario...');
    await conn.sendMessage(jid, {
      video: videoBuffer,
      caption,
      contextInfo,
      quoted
    });

    await conn.sendMessage(jid, {
      text: '‚úÖ *Video enviado.* ¬øDeseas invocar otro recuerdo o abrir otro portal?',
      contextInfo
    }, { quoted });

  } catch (err) {
    console.error('üß® [fb] Error al invocar el ritual:', err);

    if (err.code === 'ENOSPC') {
      console.warn('ü™¶ [fb] El altar est√° lleno. No hay espacio en disco.');
      return conn.sendMessage(jid, {
        text: 'ü™¶ *El altar est√° lleno de recuerdos...*\n\n> No se puede escribir m√°s hasta que se libere espacio. ¬øDeseas purgar los archivos antiguos o hacer una ofrenda de almacenamiento?',
        contextInfo
      }, { quoted });
    }

    return conn.sendMessage(jid, {
      text: 'üö´ *Ups... el archivo emocional se resisti√≥ a ser invocado.*\n\n> Intenta m√°s tarde o revisa el enlace.',
      contextInfo
    }, { quoted });
  }
}

module.exports = {
  command: 'fb',
  handler
};